# -*- coding: utf-8 -*-
"""hubconf

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S5AglacJO30mAP3oeUFWvFtYlMGcKdS2
"""

# kali
import torch
from torch import nn
import torch.optim as optim
from sklearn.datasets import make_blobs, make_circles, load_digits
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn.linear_model import LogisticRegression
from sklearn.cluster import KMeans
import numpy as np
from sklearn.metrics.cluster import homogeneity_score, completeness_score, v_measure_score


# You can import whatever standard packages are required

# full sklearn, full pytorch, pandas, matplotlib, numpy are all available
# Ideally you do not need to pip install any other packages!
# Avoid pip install requirement on the evaluation program side, if you use above packages and sub-packages of them, then that is fine!

###### PART 1 ######

def get_data_blobs(n_points=100):
  X, y = make_blobs(
    n_samples=n_points, n_features=2,
    centers=3, random_state=0
  )
  return X,y

def get_data_circles(n_points=100):
  X, y = make_circles(
    n_samples=n_points, shuffle=True,  
    factor=0.3, noise=0.05, random_state=0
  )
  return X,y

def get_data_mnist():
  digits = load_digits()
  X=digits.data
  y=digits.target
  return X,y

def build_kmeans(X=None,k=10):
  km = KMeans(
    n_clusters=k, random_state=0
  )
  return km

def assign_kmeans(km=None,X=None):
  y_pred = km.fit_predict(X)
  return y_pred

def compare_clusterings(ypred_1=None,ypred_2=None):
  h = "%.6f"% homogeneity_score(ypred_1, ypred_2)
  c = "%.6f"% completeness_score(ypred_1, ypred_2)
  v = "%.6f"% v_measure_score(ypred_1, ypred_2)
  return h,c,v

X_b , y_b = get_data_blobs()
X_c, y_c = get_data_circles()
km = build_kmeans(X = X_b, k = 10)
y_b_pred = assign_kmeans(km, X_b)
print(y_b_pred)

km = build_kmeans(X = X_c, k = 10)
y_c_pred = assign_kmeans(km, X_c)
print(y_c_pred)

print(compare_clusterings(y_b_pred, y_c_pred))